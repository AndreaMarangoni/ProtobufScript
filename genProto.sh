
#!/bin/bash

DIR="$(cd "$(dirname "$0")" && pwd )";

function protocExists {
	{ hash protoc 2>/dev/null; return 0; } || { echo >&2 "genProto.sh requires 'protoc' but it's not installed.  Aborting."; exit 1; }
}

function compileProto {
	if protocExists; then
		LS=$(ls -A "$1");
		if [ "$LS" ]; then	
				for i in *.proto; do
					protoc -I=$1 --cpp_out=$2 $1/$i;
				done;
				saveDest $2;
		else
			echo "The directory is empty";
		fi;
	fi;
	return
}

function dirExists {
	if [ -d "$1" ]; then
		return 0;
	fi;
	return 1;
}

function cleanDestination {
	file="$DIR"/.build;
	if [ ! -f "$file" ]; then		
		return;
	fi;
	destination=$(<$file)
	cd "$destination";
	rm -f "$file"
	rm "defineMessages.h";
	LS=$(ls -A);
	if [ "$LS" ]; then
		rm *.pb.h *.pb.cc
	fi
	return;
}

function saveDest {
	echo $1 > "$DIR"/.build;
	return;
}

function createDefines {
	cd "$dest"
	defines="defineMessages.h"
	if [ -f "$defines" ]; then
		rm "$defines";
	fi;
	echo "#ifndef DEFINE_MESSAGES_HH" >> "$defines"
	echo "#define DEFINE_MESSAGES_HH" >> "$defines"
	echo "" >> "$defines"
	echo "" >> "$defines"
	echo "#include <google/protobuf/message.h>" >> "$defines";
	echo "" >> "$defines"
	echo "" >> "$defines"
	echo "/* DON'T EDIT THIS FILE. THIS FILE IS AUTOGENERATED */" >> "$defines"
	echo "" >> "$defines"
	echo "" >> "$defines"
	for i in $(ls *.pb.h); do 
		echo "#include \""$i"\" " >> "$defines"
	done
	echo "" >> "$defines"
	echo "" >> "$defines"
	echo "#endif" >> "$defines"
	echo "" >> "$defines"
	cd "$DIR";
	return;
}

function help {
	echo "Use:";
	echo " ./compileProto [-i sourceDir] [-o destDir] ";
	echo " "
	echo " -i sourceDir [--input sourceDir]"
	echo "        directory where .proto files are located"
	echo " "
	echo " -o destDir [--output destDir]"
	echo "        destination directory where generated files will be located"
	echo " "
	echo " --clean"
	echo "        if compilation already took place we clean everything on destination directory" 
	echo " "
	echo " -h or --help "
	echo "        show this help"
	exit;
	return;
}

source=$(pwd)
dest=$(pwd)
cleaned=0;
params=$#

if [ "$params" -eq 0 ]; 
then
	help;
fi;

while [[ $# > 0 ]];
do
	param="$1"
	shift
	case $param in 
		-i|--input)
		if dirExists $1; then
			source="$1"
			shift
		else
			help;
		fi;
		
		;;
		-o|--output)
		if dirExists $1; then
			dest="$1"
			shift
		else
			help;
		fi;
		;;
		-h|--help)
		help;
		;;
		--clean)
		cleaned=1;
		cleanDestination;
		;;
		*)
		help;
	esac
done;


if [ ! $cleaned -eq 1 ]; then 
	compileProto $source $dest; 
	createDefines; 
fi;
